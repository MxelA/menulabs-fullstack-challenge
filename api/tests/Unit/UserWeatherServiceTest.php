<?php

namespace Tests\Unit;

use App\DTOs\WeatherServiceDto;
use App\Exceptions\WeatherApiServiceErrorException;
use App\Models\User;
use App\Models\Weather;
use App\Repositories\WeatherRepository\IWeatherRepository;
use App\Services\User\IUserWeatherService;
use App\Services\User\UserWeatherService;
use App\Services\WeatherApi\IWeatherApiService;
use PHPUnit\Framework\MockObject\MockObject;
use Tests\TestCase;

class UserWeatherServiceTest extends TestCase
{
    protected MockObject  $weatherApiService;
    protected MockObject  $weatherRepository;
    protected IUserWeatherService  $userWeatherService;
    protected WeatherServiceDto $weatherServiceDto;
    protected User $userModel;
    protected Weather $weatherModel;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->weatherApiService = $this->createMock(IWeatherApiService::class);
        $this->weatherRepository = $this->createMock(IWeatherRepository::class);
        $this->userWeatherService = new UserWeatherService($this->weatherApiService, $this->weatherRepository);

        $this->weatherModel     = Weather::factory()->make();
        $this->userModel        = User::factory()->make();

        $this->weatherServiceDto = new WeatherServiceDto(
            $this->weatherModel->temp,
            $this->weatherModel->pressure,
            $this->weatherModel->humidity,
            $this->weatherModel->unit
        );
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_update_user_weather()
    {

        $this->weatherApiService
            ->expects($this->once())
            ->method('getWeatherByLatLon')
            ->with($this->userModel->latitude, $this->userModel->longitude)
            ->willReturn($this->weatherServiceDto);

        $this->weatherRepository
            ->expects($this->once())
            ->method('saveWeatherDataFromApiService')
            ->with($this->userModel, $this->weatherServiceDto)
            ->willReturn($this->weatherModel);

        $result = $this->userWeatherService->updateUserWeather($this->userModel);

        $this->assertEquals(true, $result);

    }

    public function test_update_user_api_service_throw_weather_service_api_exception()
    {

        $this->weatherApiService
            ->expects($this->once())
            ->method('getWeatherByLatLon')
            ->with($this->userModel->latitude, $this->userModel->longitude)
            ->willThrowException(new WeatherApiServiceErrorException())
        ;

        $this->weatherRepository
            ->expects($this->never())
            ->method('saveWeatherDataFromApiService')
            ->with($this->userModel, $this->weatherServiceDto)
            ->willReturn($this->weatherModel);

        $result = $this->userWeatherService->updateUserWeather($this->userModel);

        $this->assertEquals(false, $result);

    }


}
