<?php

namespace Tests\Feature;

use App\Models\Booking;
use App\Models\Room;
use App\Models\User;
use App\Models\Weather;
use App\Repositories\BookingRepository\BookingRepository;
use App\Repositories\UserRepository\UserRepository;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\Sequence;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UserRepositoryTest extends TestCase
{
    use RefreshDatabase;
    protected User $userModel;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userModel = new User();

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_get_user_that_need_to_update_data_no_weather_data()
    {

        User::factory()->count(5)->create();
        $users   = (new UserRepository($this->userModel))->getUsersThatNeedToUpdateWeatherData(25);

        $this->assertEquals(5, $users->count());
    }

    public function test_get_user_that_need_to_update_data_weather_data_last_update_40min_before()
    {
        Weather::factory()
            ->count(5)
            ->for(User::factory()->create())
            ->create([
                'created_at' => Carbon::now()->addHour(-2),
                'updated_at' => Carbon::now()->addMinutes(-40)
            ]);

        $users   = (new UserRepository($this->userModel))->getUsersThatNeedToUpdateWeatherData(25);

        $this->assertEquals(5, $users->count());
    }

    public function test_get_user_that_need_to_update_data_weather_data_last_update_20min_before()
    {
        Weather::factory()
            ->count(5)
            ->for(User::factory()->create())
            ->create([
                'created_at' => Carbon::now()->addHour(-2),
                'updated_at' => Carbon::now()->addMinutes(-20)
            ]);

        $users   = (new UserRepository($this->userModel))->getUsersThatNeedToUpdateWeatherData(25);

        $this->assertEquals(0, $users->count());
    }
}
